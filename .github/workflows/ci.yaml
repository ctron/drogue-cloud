name: CI

on:
  # Run on main branch for testing
  push:
    branches:
      - main
  # And only PRs, as we don't publish any images here
  pull_request:

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.49 # must be aligned with the builder image
          components: rustfmt, clippy
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get -y install libsasl2-dev

      - name: Check
        run: make pre-check

      - name: Compile
        run: make host-build

      - name: Fix permissions
        run: make fix-permissions

  test:
    name: run tests
    runs-on: ubuntu-20.04
    needs: [check]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.49 # must be aligned with the builder image
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get -y install libsasl2-dev

      - name: Run tests
        run: |
          make test

  build:
    name: build
    runs-on: ubuntu-20.04
    needs: [check]
    steps:

      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v2
        with:
          path: console-frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('console-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.49 # must be aligned with the builder image
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get -y install libsasl2-dev

      - name: Run build
        run: |
          make build

      - name: Save images
        run: |
          make tag-images save-images CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.sha }}

      - name: Fix permissions
        run: make fix-permissions

      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: container-images
          path: build/images/all.tar

  deploy:
    name: deploy on kind
    runs-on: ubuntu-20.04
    needs: [check, build]
    env:
      CLUSTER: "kind"
    steps:

      - uses: actions/checkout@v2

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.1.0
        with:
          wait: 300s
          cluster_name: kind

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: container-images

      - name: load images in Kind
        run: kind load image-archive all.tar

      - name: Update image names
        run: |
          mkdir tmp
          # A policy of "Always" is not going to work, as the images are pushed into the kind cluster
          # and cannot be pulled. Using "Always" would result in attempts to try to pull from a location
          # that does not exist.
          ./hack/replace-images.py ${{ github.sha }} Never deploy dev.local tmp/deploy

      - name: Deploy drogue
        run: env TEST_CERTS_IMAGE=dev.local/test-cert-generator:${{ github.sha }} ./hack/drogue.sh -d tmp/deploy
        timeout-minutes: 20

      - name: Collect logs
        if: failure()
        run: ./.github/scripts/collect_logs.sh /tmp drogue-iot

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: drogue-iot-logs
          path: /tmp/logs
